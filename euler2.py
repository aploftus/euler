"""
Each new term in the Fibonacci sequence is generated by adding
the previous two terms.
By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence
whose values do not exceed four million,
find the sum of the even-valued terms.
"""

"""
at first the "new_fib_list" worked with [0:-1], but then I moved something
and it's going one step too far. I need this because the if statement
will end up appending one number past the limit, since it is unlikely
that the limit is a fibonacci number
"""

def fib(limit):
	fib_list = [1, 2] #start with 1, 2 instead of 1, 1
	
	for ult in fib_list: #create a looping append

		if ult < limit: #this doesn't seem to work fully, see below

			ult = fib_list[-1]
			penult = fib_list[-2]
			next_dig = ult + penult

			fib_list.append(next_dig)

	new_fib_list = fib_list[0:-2] #halp! why is it going too far? see above

	print new_fib_list #I just want to confirm that the Fibonacci works

	result = 0
	for num in new_fib_list:
		if num%2 == 0:
			result += num #sums up only even numbers
	
	print "The result is: " + str(result)



print fib(4000000)



